		############# comandos python Django  ############

sudo apt-get update  -------> actualizar
sudo apt-get upgrade  -----> aplicar actualizaciones

sudo snap install --classic code   -----> instalar Visual code
sudo apt install python3.12-venv   -----> instalar paquete para 
                                          crear entornos virtuales
python3 -m venv nombre_del_entorno_virtual 
        -------> crear un entorno virtual en la carpeta actual
        
python3 -m venv ~/nombre_carpeta/nombre_entorno
        ------> crear entorno en una carpeta dentro del home
        
source /nombre_carpeta/nombre_entorno_virtual/bin/activate
		~/Documentos/nombre_carpeta_proyecto/nombre_carpeta_entorno_virtual/nombre_entorno_virtual/bin/activate
	----> activar entorno virtual
deactivate 
	-----> desactivar entorno virtual
pip3 install Django      ----> instalar Django

pip3 freeze requirements.txt 
		----> crea un archivo .txt con las dependecias utilizadas en el actual proyecto

django-admin --help    ------> mirar documentacion de django
django-admin startproject nombre_del_proyecto     ----> inicializa un proyecto con el nombre especificado

se crea un archivo manage.py -----> todos los comandos se ejecutan con el manage.py a nivel de proyecto

python3 manage.py --help    ------> comandos que pueden ejecutarse con el manage.py
python3 manage.py runserver    ----> inicia un servidor de desarrollo y nos muestra la url donde esta corriendo la 
					aplicacion 
control + c  -----> detener server
python3 manage.py startapp nombre_de_la_app   -----> crea una app con el nombre especificado

primero creamos un modelo en models.py
creamos la vista en views.py
se crea la carpeta template y ahi mismo otra carpeta con el nombre de la app (my_first_app) y despues
	el archivo .html especificado en la vista. 
	
en visual estudio code usar extension jinja para hacer uso de for, if y demas en html

python3 manage.py migrations   -----> corre todas las migraciones
python3 manage.py makemigrations   ------> trasnfiere las migraciones a las tablas de la base de datos
sudo apt update -----> actualizar gestor de paquetes
sudo apt upgrade   ----> aplicar actualizaciones
sudo apt install sqlite3   -----> instalar sqlite3

python3 manage.py dbshell   ------->  se conecta a la base de datos y nos muestra
.tables     -------> muestra las tablas de la base de datos
.schema nombre_de_la_tabla   -----> nos muestra como fue construida la tabla

#### creacion de campos nuevos en la base de datos #########
realizar respectivos cambios aÃ±adiendo filas o datos en el models.py
despues realizar un makemigrations y migrate

python3 manage.py shell   ----> abre una terminal de python con django
control + D -----> salir de la terminal
my_car.save()  -----> guarda el objeto creado en la base de datos
my_car.title = "mazda" ------> actualiza el campo nombre por el especificado
				no se actuliza en la base de datos hasta no hacer un .save
				
para modificar uno de los atributos del objeto 	
	--->  para mirar el registro actual nombre_objeto.atributo
	nombre_objeto.atributo = "nuevo_registro"
	nombre_objeto.save()   ------> para guardar el dato actualizado
	select * from nombre_de_la_app_nombre_clase 
	----> ejemplo -----> select * from my_first_app_car
	
	nombre_objeto.delete() -------> para borrar un registro
	     ejm --->  nuevo_car.delete()
	     

##### relaciones de tablas django #############

nombre_campo = models.ForeignKey (nombre_clase_a_relacionar, on_delete=models.DO_NOTHING)
	
	# se establece la relacion de las tablas, en los parametros se establece la
        # la clase a relacionar en este caso con publisher
        # on_delete se utiliza para tomar una decision en caso de que se borre un publisher(editor)
        # DO_NOTHING  no hace nada, PROTECT no se puede borrar porque aun hay datos con ese publisher
        
pip install ipython    ---->  una dependencia que nos ayuda a tener una mejor autocompleto al escribir codigo con 
				tab

        # CASCADE si se borra un publisher tambien borra todos los libros relacionados con este
        
########## RELACION MUCHOS A MUCHOS ############
nombre_campo = models.ManytoManyFielda(nombre_clase_a_relacionar, related_name="authors")
	---> relacion muchos a muchos como parametros la clase a relacionar y nombre con el que lo vayamos a relacionar
	     cuando queramos acceder a este por medio de la otra clase (Author)
	     
cuando se borra una instancia que creamos por cerrar la terminal podemos crear una nueva de una forma mas rapida y sencilla

book = book.objects.first()
book
con .set() se puede setear autores pero recibe como parametro una lista iterable

################# URL ##############################

se recomienda por cada aplicacion tener un archivo url

cada carpeta que tenga un __init__.py es un modulo en python

request.__dict__    -----> en la shell muestra los metodos que tiene request


###################  TEMPLATES   ######################################

{{ nombre variable }} ------>  creacion de variable con django en html
{{ var  foo }}    -------> filtros
		ejemplo : 
			birth_date = datetime(2023,12,05)
			--> si queremos mostrar solo el mes y el dia:
			{{ birth_date | date:"M/d"| lower }}
			--> los filtros se pueden concatenar con otros filtros en este caso (lower)
			    que pone todo lo que recibe en minusculas
		resultado = "12/05"
		
		
{% if,for,url %}   -----> los TAGS nos permiten agregar funcionalidades a nuestro codigo html como:
		     -hacer una validacion
		     -recorrer una lista
		     -mostrar una url dinamica
		     
{% endif%}    -----> algunas etiquetas tienen etiqueta de cierre como if y for
   endfor		
   
base.html   -----> archivo que nos permite tener contenido comun para ser reutilizado

